from datetime import date
from logger import logger
from aiogram.filters import StateFilter
from aiogram import types
from config import dp
from handlers.kayboards import *
from aiogram.types import ReplyKeyboardRemove
from handlers.states import SurveyStates
from handlers.database import get_db_connection
from aiogram.fsm.context import FSMContext

async def handle_user_data(user_id, conn, colku=False):

    async with conn.cursor() as cursor:
        try:
            await cursor.execute(f"SELECT * FROM calendar_us WHERE user_id = %s", (user_id,))
            result = await cursor.fetchone()
            
            if not result:
                logger.debug(f'–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –≤ calender_us')
                await cursor.execute(f"""
                    INSERT INTO calendar_us 
                    (user_id, date_t, calory_td, ugl_td, bel_td, jir_td)
                    VALUES (%s, %s, 0, 0, 0, 0)
                """, (user_id, date.today()))
                await conn.commit()
                return await handle_user_data(user_id, conn, colku)  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –¥–∞—Ç—ã
            if result['date_t'] != date.today():
                nutrients = {
                    'calo': result.get('calory_td', 0) or 0,
                    'belki': result.get('bel_td', 0) or 0,
                    'ugle': result.get('ugl_td', 0) or 0,
                    'jiri': result.get('jir_td', 0) or 0
                }

                if any(nutrients.values()):
                    logger.debug(f'—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ç–∞–∫ –∫–∞–∫ —Å–º–µ–Ω–∏–ª—Å—è –¥–µ–Ω—å {user_id}')
                    await cursor.execute("""
                        INSERT INTO daily_nutrition
                        (user_id, date, calories, proteins, fats, carbohydrates)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (user_id, result['date_t'], nutrients['calo'], nutrients['belki'], nutrients['jiri'], nutrients['ugle']))
                    logger.debug(f'–æ–±–Ω—É–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ calender_us {user_id}')
                    await cursor.execute(f"""
                        UPDATE calendar_us 
                        SET date_t = %s, calory_td = 0, ugl_td = 0, bel_td = 0, jir_td = 0
                        WHERE user_id = %s
                    """, (date.today(), user_id))
                    
                    await conn.commit()

            await cursor.execute("SELECT COUNT(*) as count FROM daily_nutrition WHERE user_id = %s", (user_id,))
            count = (await cursor.fetchone())['count']
            logger.debug(f'—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–æ–ª –≤–æ –∑–∞–ø–∏—Å–µ–π –≤ daily_n = {count}')
            if count > 30:
                logger.debug(f'—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ {user_id}')
                await cursor.execute("""
                    DELETE FROM daily_nutrition 
                    WHERE user_id = %s 
                    ORDER BY date LIMIT 1
                """, (user_id,))
                await conn.commit()
            if colku:
                await cursor.execute(f"SELECT * FROM calendar_us WHERE user_id = %s", (user_id,))
                return (await cursor.fetchone()) or {}
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}: {str(e)}")
            return False if colku else None

async def change_some(user_id, column, value, data_table='users', action='update'):
    logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è {column} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ {data_table}')
    conn = None
    try:
        conn = await get_db_connection()
        if not conn:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False

        async with conn.cursor() as cursor:
            if data_table == 'calendar_us':
                await handle_user_data(user_id=user_id, conn=conn)
            query = (
                f'UPDATE {data_table} SET {column} = {column} + %s WHERE user_id = %s'
                if action == 'add' else
                f'UPDATE {data_table} SET {column} = %s WHERE user_id = %s'
            )
            logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {column}, {data_table}...')
            await cursor.execute(query, (value, user_id))
            await conn.commit()
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä ({column}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω, {data_table}")
            return True

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î, {data_table} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {column} ({e})')
        return False
    finally:  
        if conn:
            await conn.ensure_closed()


@dp.message(StateFilter(SurveyStates.GET_IN_PROF))
async def handle_value_input_prof(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    logger.debug(f"user_data: {user_data}")
    
    try:
        data_table=user_data['data_table']
    except:
        data_table='users'
    try:
        action=user_data['action']
    except:
        action='update'
        
    if user_data["column"] == 'gender':
        answer = '‚ùå –í–≤–µ–¥–∏—Ç–µ –ú—É–∂—á–∏–Ω–∞ –∏–ª–∏ –ñ–µ–Ω—â–∏–Ω–∞'
    else:
        answer = "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!"

    user_id = message.from_user.id
    
    try:
        value =  user_data['—Åheck'](message.text)
        logger.debug(f'value: {value}')
        if not value:
            raise ValueError
            
        success = await change_some(
            user_id=user_id,
            column=user_data['column'],
            value=value,
            data_table=data_table,
            action=action
        )

        if success:
            if data_table == 'users':
                await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=profile_menu_keyboard_change())
            else:
                if action == 'update':
                    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=calculator_menu_keyboard_change1())
                else:
                    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=calculator_menu_keyboard_change())
        else:
            if data_table == 'users':
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=profile_menu_keyboard_change())
            else:
                if action == 'update':
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=calculator_menu_keyboard_change1())
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=calculator_menu_keyboard_change())

    except ValueError:
        await message.answer(answer)
        return
    
    await state.clear()


async def cmd_update_weight(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="weight",
        —Åheck=lambda x: float(x) if float(x) and 20 < float(x) < 300 else False,
    )
    await message.answer(f"üìè –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def cmd_update_height(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="height",
        —Åheck=lambda x: float(x) if float(x) and 20 < float(x) < 250 else False,
    )
    await message.answer(f"üìè –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)
    
async def cmd_update_age(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –≤–æ–∑—Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="age",
        —Åheck=lambda x: int(x) if int(x) and 5 < int(x) < 131 else False,
    )
    await message.answer(f"‚åõ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def cmd_update_gender(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="gender",
        —Åheck=lambda x: x if x == '–ñ–µ–Ω—â–∏–Ω–∞' or x == '–ú—É–∂—á–∏–Ω–∞' else False,
    )
    await message.answer(f"üöª –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", reply_markup=gender_keyboard())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def cmd_update_activity_level(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="activity_level",
        —Åheck=lambda x: int(x) if int(x) in range(1, 5)  else False,
    )
    await message.answer(
'''<b>üî• –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>

1. <b>üßò –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏</b>  
   <i>–ú–∞–ª–æ –∏–ª–∏ –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</i>

2. <b>üèì –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>  
   <i>1‚Äì3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é</i>

3. <b>üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>  
   <i>3‚Äì5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é</i>

4. <b>üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>  
   <i>6‚Äì7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞</i>''',
    parse_mode="HTML", reply_markup=acivity_level_keyboard()
)
    await state.set_state(SurveyStates.GET_IN_PROF)

async def cmd_update_name(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="name",
        —Åheck=lambda x: x,
    )
    await message.answer(f"üìõ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def cmd_update_goal(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="goal",
        —Åheck=lambda x: int(x) if int(x) in range(1, 10)  else False,
    )
    await message.answer(
    '''<b>üåü –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å:</b>

1. <b>üìà –ù–∞–±—Ä–∞—Ç—å –≤–µ—Å</b>  
   <i>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Å—Å—ã —Ç–µ–ª–∞</i>

2. <b>ü•ó –ü–æ—Ö—É–¥–µ—Ç—å</b>  
   <i>–ü–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è</i>

3. <b>üí™ –ù–∞—Ä–∞—Å—Ç–∏—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É</b>  
   <i>–†–∞–∑–≤–∏—Ç–∏–µ –º—É—Å–∫—É–ª–∞—Ç—É—Ä—ã</i>

4. <b>üö¥‚Äç‚ôÇÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º–∞</b>  
   <i>–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏</i>

5. <b>üß¨ –£–∫—Ä–µ–ø–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç</b>  
   <i>–£—Å–∏–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º–∞</i>

6. <b>üèÜ –ü—Ä–∏–¥–∞—Ç—å —Ç–µ–ª—É —Ä–µ–ª—å–µ—Ñ–Ω–æ—Å—Ç—å</b>  
   <i>–°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ç–∫–æ–≥–æ –º—ã—à–µ—á–Ω–æ–≥–æ —Ä–µ–ª—å–µ—Ñ–∞</i>

7. <b>ü©∫ –ü–æ–ø—Ä–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ</b>  
   <i>–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è</i>

8. <b>‚öïÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã</b>  
   <i>–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</i>

9. <b>ü¶ç –°—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ</b>  
   <i>–†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Å–∏–ª—ã</i>''',
    parse_mode="HTML", reply_markup=goal_keyboard()
)
    await state.set_state(SurveyStates.GET_IN_PROF)

async def update_calories(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="calory_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è üõ†Ô∏è –ö–∫–∞–ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def update_belki(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="bel_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è üõ†Ô∏è –ë–µ–ª–∫–æ–≤", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def update_jiri(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="jir_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è üõ†Ô∏è –ñ–∏—Ä–æ–≤", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)
    
async def update_uglewodi(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        column="ugl_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è üõ†Ô∏è –£–≥–ª–µ–≤–æ–¥–æ–≤", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF)

async def add_calories(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        action='add',
        column="calory_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è üçΩÔ∏è –ö–∫–∞–ª", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF) 
    
async def add_belki(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        action='add',
        column="bel_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ü•© –ë–µ–ª–∫–æ–≤", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF) 

async def add_jiri(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        action='add',
        column="jir_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ü•ë –ñ–∏—Ä–æ–≤", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF) 
    
async def add_uglewodi(message: types.Message, state: FSMContext):
    logger.debug(f"–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}")
    await state.update_data(
        action='add',
        column="ugl_td",
        —Åheck=lambda x: float(x) if float(x) and float(x) >= 0 else False,
        data_table='calendar_us'
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è üçû –£–≥–ª–µ–≤–æ–¥–æ–≤", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_IN_PROF) 

