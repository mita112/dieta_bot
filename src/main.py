import html
import aiomysql
from babel.dates import format_date
from aiogram import Bot, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.markdown import hbold
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import date
from logger import logger
from config import BOT_TOKEN, dp
from handlers.kayboards import *
from handlers.In_prof import *
from handlers.states import *
from handlers.database import get_db_connection

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()

#–∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /start")
    user = message.from_user
    conn = None

    try:
        conn = await get_db_connection()
        if not conn:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ")
            return

        async with conn.cursor() as cursor:
            await cursor.execute("SELECT * FROM users WHERE user_id = %s", (user.id,))
            result = await cursor.fetchone()
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result}")

            if not result:
                await cursor.execute("""
                    INSERT INTO users (user_id, weight, height, age, gender, activity_level, name, goal)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """, (user.id, 0.0, 0.0, 0, '–ú', 1, user.first_name, 1))
                await conn.commit()
                await message.answer('üëã –ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –¥–∏–µ—Ç–æ–π, –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ')
                await cmd_profile(message)

            else:
                await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=back_to_menu_keyboard())

    except Exception as e:
        logger.fatal(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e} –ø–æ—Å–ª–µ /start", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            try:
                if not conn.closed:
                    await conn.ensure_closed()
            except Exception as close_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {close_error}")

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /menu")
    await message.answer(f'–ú–µ–Ω—é:', reply_markup=menu_keyboard())
    
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /help")
    await message.answer("üÜò –≠—Ç–æ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É. –ó–¥–µ—Å—å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=back_to_menu_keyboard())
    
@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /info")
    await message.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –∞–≤—Ç–æ—Ä @hacker588", reply_markup=back_to_menu_keyboard())
    
@dp.message(Command("calender"))
async def cmd_calender(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /calendar")
    try:
        conn = await get_db_connection()
        if not conn:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False
        async with conn.cursor() as cursor:
            await cursor.execute(
                "SELECT * FROM daily_nutrition WHERE user_id = %s ORDER BY date DESC",
                (message.from_user.id,)
            )
            result = await cursor.fetchall()
            if not result:
                await message.answer('–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç')
            else:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=calender_keyboard())
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥–∞ /calendar {e}')
    finally:
        if conn:
            await conn.ensure_closed()
                       
@dp.message(Command("calculator"))
async def cmd_calculator(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /calculator")
    user = message.from_user
    conn = None
    try:
        logger.debug(f'–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
        conn = await get_db_connection()
        if not conn:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ")
            return    
        user_data = await handle_user_data(user_id=message.from_user.id, conn=conn, colku=True)
        await message.answer(
            f'''<b>üî• –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>

<b>üçΩ –ö–∞–ª–æ—Ä–∏–∏:</b> {int(user_data['calory_td'])} –∫–∫–∞–ª
<b>ü•© –ë–µ–ª–∫–∏:</b> {user_data['bel_td']} –≥
<b>ü•ë –ñ–∏—Ä—ã:</b> {user_data['jir_td']} –≥
<b>üçû –£–≥–ª–µ–≤–æ–¥—ã:</b> {user_data['ugl_td']} –≥''', 
parse_mode="HTML", reply_markup=calculator_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    finally:
        if conn:
            await conn.ensure_closed()
   
@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /profile")
    conn = await get_db_connection()
    cursor = await conn.cursor(aiomysql.DictCursor)
    try:
        await cursor.execute("SELECT * FROM users WHERE user_id = %s", (message.from_user.id,))
        user_data = await cursor.fetchone()
        activ = ['–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', '–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'][user_data['activity_level']-1]
        goal = ['–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', '–ü–æ—Ö—É–¥–µ—Ç—å', '–ù–∞—Ä–∞—Å—Ç–∏—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É', '–ü–æ–≤—ã—Å–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º–∞', '–£–∫—Ä–µ–ø–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç', '–ü—Ä–∏–¥–∞—Ç—å —Ç–µ–ª—É —Ä–µ–ª—å–µ—Ñ–Ω–æ—Å—Ç—å', '–ü–æ–ø—Ä–∞–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã', '–°—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ'][user_data['goal']-1]
        if user_data:
            await message.answer(
                f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                f"<b>üìõ –ò–º—è:</b> {html.escape(user_data['name'])}\n"
                f"<b>‚öñÔ∏è –í–µ—Å:</b> {html.escape(str(user_data['weight']))} –∫–≥\n"
                f"<b>üìè –†–æ—Å—Ç:</b> {html.escape(str(user_data['height']))} —Å–º\n"
                f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {html.escape(str(user_data['age']))}\n"
                f"<b>üë´ –ü–æ–ª:</b> {html.escape(user_data['gender'])}\n"
                f"<b>üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {html.escape(activ)}\n"
                f"<b>üéØ –¶–µ–ª—å:</b> {html.escape(goal)}\n"
                f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {html.escape(user_data['registration_date'].strftime('%d.%m.%Y'))}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
                reply_markup=profile_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            logger.error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–º–∞–Ω–¥–∞ /profile')
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=back_to_menu_keyboard())
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ {e} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /profile')
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_keyboard())
    finally:
        logger.debug('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ë–î –ø–æ—Å–ª–µ /profile...')
        try:
            await conn.ensure_closed()
            logger.debug('–ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ /profile')
        except Exception as e:
            logger.error(f'O—à–∏–±–∫–∞ {e} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –ë–î –ø–æ—Å–ª–µ /profile')

@dp.message(Command("change_in_pr"))
async def cmd_change_in_pr(message: types.Message):
    logger.info(f'–ü—Ä–∏–Ω—è–ª –∫–æ–º–∞–Ω–¥—É /—Åhange_in_pr –æ—Ç {message.from_user.id}')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=profile_menu_keyboard_change())

@dp.message(Command("change_in_cal"))
async def cmd_change_in_cal(message: types.Message, new=False):
    logger.info(f'–ü—Ä–∏–Ω—è–ª –∫–æ–º–∞–Ω–¥—É /change_in_cal –æ—Ç {message.from_user.id}')
    if new:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–±–∞–≤–∏—Ç—å, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', reply_markup=calculator_menu_keyboard_change())
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', reply_markup=calculator_menu_keyboard_change1())



async def cmd_nedela_in_calendar(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /day_in_calendar")
    try:
        conn = await get_db_connection()
        if not conn:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False

        async with conn.cursor() as cursor:
            await cursor.execute(
                """SELECT * 
                FROM daily_nutrition 
                WHERE 
                    user_id = %s 
                ORDER BY date DESC 
                LIMIT 7""",  # 
                (message.from_user.id,)
            )
            results = await cursor.fetchall()

            if not results:
                await message.answer('‚ú® <b>üì≠ –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç.')
            else:
                response = "‚ú® <b>üìÜ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b> ‚ú®\n\n"
                for record in results[::-1]:
                    formatted_date = format_date(record['date'], "EEE, dd.MM.yyyy", locale='ru').title()
    
                    response += (
                        f"‚ñ´Ô∏è <b>{formatted_date}</b>\n"
                        f"   üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> <i>{record['calories']}</i> –∫–∫–∞–ª\n"
                        f"   ü•© <b>–ë–µ–ª–∫–∏:</b>   {record['proteins']:>5} –≥\n"
                        f"   ü•ë <b>–ñ–∏—Ä—ã:</b>     {record['fats']:>5} –≥\n"
                        f"   üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {record['carbohydrates']:>5} –≥\n"
                        f"\nüåø{'‚îÅ'*15}üåø\n"
                    )

                await message.answer(response,
                    parse_mode="HTML", 
                    reply_markup=calender_keyboard())

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥–∞ /day_in_calendar {e}')
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_keyboard())
    finally:
        if conn:
            await conn.ensure_closed()

async def cmd_month_in_calendar(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫–æ–º–∞–Ω–¥–∞ - /day_in_calendar")
    try:
        conn = await get_db_connection()
        if not conn:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return False

        async with conn.cursor() as cursor:
            await cursor.execute(
                """SELECT * 
                FROM daily_nutrition 
                WHERE 
                    user_id = %s 
                ORDER BY date DESC 
                LIMIT 30""",  # 
                (message.from_user.id,)
            )
            results = await cursor.fetchall()

            if not results:
                await message.answer('üì≠ –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç.')
            else:
                response = "‚ú® <b>üìÜ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:</b> ‚ú®\n\n"
                for record in results[::-1]:
                    formatted_date = format_date(record['date'], "EEE, dd.MM.yyyy", locale='ru')
    
                    response += (
                        f"‚ñ´Ô∏è <b>{formatted_date.title()}</b>\n"
                        f"   üî• –ö–∞–ª–æ—Ä–∏–∏: <i>{record['calories']}</i> –∫–∫–∞–ª\n"
                        f"   ü•© –ë–µ–ª–∫–∏:   {record['proteins']:>5} –≥\n"
                        f"   ü•ë –ñ–∏—Ä—ã:     {record['fats']:>5} –≥\n"
                        f"   üçû –£–≥–ª–µ–≤–æ–¥—ã: {record['carbohydrates']:>5} –≥\n"
                        f"\nüåø{'‚îÅ'*15}üåø\n"
                    )
            await message.answer(response,
                parse_mode="HTML", 
                reply_markup=calender_keyboard())
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥–∞ /day_in_calendar {e}')
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu_keyboard())
    finally:
        if conn:
            await conn.ensure_closed()

async def cmd_select_date(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_DATE)

@dp.message(StateFilter(SurveyStates.GET_DATE))
async def handle_date_input(message: types.Message, state: FSMContext):
    conn = None
    try:
        if len(message.text.split('.')) != 3:
            raise ValueError
            
        day, month, year = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100):
            raise ValueError
            
        selected_date = date(year, month, day)
        
        if selected_date > date.today():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return

        conn = await get_db_connection()
        if not conn:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        async with conn.cursor() as cursor:
            await cursor.execute(
                "SELECT * FROM daily_nutrition WHERE user_id = %s AND date = %s",
                (message.from_user.id, selected_date)
            )
            record = await cursor.fetchone()

            if record:
                formatted_date = format_date(selected_date, "EEE, dd.MMMM yyyy", locale='ru').title()
                response = (
                    f"üìÖ <b>{formatted_date}</b>\n\n"
                    f"üî• –ö–∞–ª–æ—Ä–∏–∏: {record['calories']} –∫–∫–∞–ª\n"
                    f"ü•© –ë–µ–ª–∫–∏: {record['proteins']} –≥\n"
                    f"ü•ë –ñ–∏—Ä—ã: {record['fats']} –≥\n"
                    f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {record['carbohydrates']} –≥\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                
                keyboard = ReplyKeyboardBuilder()
                keyboard.add(types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å"))
                keyboard.add(types.KeyboardButton(text="üìÖüîç –ö–∞–ª–µ–Ω–¥–∞—Ä—å"))
                keyboard.adjust(1)
                
                await message.answer(response, 
                    parse_mode="HTML", 
                    reply_markup=keyboard.as_markup(resize_keyboard=True))
                await state.update_data(selected_date=selected_date.isoformat())
                await state.set_state(SurveyStates.READY_FOR_EDIT)
            else:
                await message.answer("üì≠ –ó–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                    reply_markup=calender_keyboard())
                await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2023)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã")
        await state.clear()
    finally:  
        if conn:
            await conn.ensure_closed()

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å", StateFilter(SurveyStates.READY_FOR_EDIT))
async def start_edit_day(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if 'selected_date' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(
        types.KeyboardButton(text="üî• –ö–∞–ª–æ—Ä–∏–∏"),
        types.KeyboardButton(text="ü•© –ë–µ–ª–∫–∏"),
        types.KeyboardButton(text="ü•ë –ñ–∏—Ä—ã"),
        types.KeyboardButton(text="üçû –£–≥–ª–µ–≤–æ–¥—ã"),
        types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
    )
    keyboard.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", 
        reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(SurveyStates.GET_EDIT_PARAM)

@dp.message(StateFilter(SurveyStates.GET_EDIT_PARAM))
async def handle_edit_param(message: types.Message, state: FSMContext):
    param_map = {
        "üî• –ö–∞–ª–æ—Ä–∏–∏": "calories",
        "ü•© –ë–µ–ª–∫–∏": "proteins",
        "ü•ë –ñ–∏—Ä—ã": "fats", 
        "üçû –£–≥–ª–µ–≤–æ–¥—ã": "carbohydrates"
    }
    
    if message.text not in param_map:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!")
        return
    
    await state.update_data(edit_param=param_map[message.text])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", 
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.GET_EDIT_VALUE)

@dp.message(StateFilter(SurveyStates.GET_EDIT_VALUE))
async def handle_edit_value(message: types.Message, state: FSMContext):
    conn = None
    try:
        user_data = await state.get_data()
        if 'selected_date' not in user_data or 'edit_param' not in user_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        selected_date = date.fromisoformat(user_data['selected_date'])
        param = user_data['edit_param']
        
        value = float(message.text)
        if value < 0:
            raise ValueError

        conn = await get_db_connection()
        async with conn.cursor() as cursor:
            await cursor.execute(
                "SELECT * FROM daily_nutrition WHERE user_id = %s AND date = %s",
                (message.from_user.id, selected_date)
            )
            if not await cursor.fetchone():
                await cursor.execute(
                    "INSERT INTO daily_nutrition (user_id, date) VALUES (%s, %s)",
                    (message.from_user.id, selected_date)
                )
            
            await cursor.execute(
                f"UPDATE daily_nutrition SET {param} = %s WHERE user_id = %s AND date = %s",
                (value, message.from_user.id, selected_date)
            )
            await conn.commit()
            
            await message.answer("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", 
                reply_markup=calender_keyboard())
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
    except KeyError as e:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    finally:
        await state.clear()
        if conn:
            await conn.ensure_closed() 



BUTTON_HANDLERS = {
    "üìã –ú–µ–Ω—é": cmd_menu,
    "üÜò –ü–æ–º–æ—â—å": cmd_help,
    "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": cmd_calculator,
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ" : cmd_info,
    "üë§ –ü—Ä–æ—Ñ–∏–ª—å" : cmd_profile,
    "üîß –ò–∑–º–µ–Ω–∏—Ç—å": cmd_change_in_pr,
    "üìÖüîç –ö–∞–ª–µ–Ω–¥–∞—Ä—å": cmd_calender,
    "üìä –ù–µ–¥–µ–ª—è": cmd_nedela_in_calendar,
    "üóìÔ∏è –ú–µ—Å—è—Ü": cmd_month_in_calendar
}

BUTTON_HANDLERS_WITH_STATE = {
    "‚öñÔ∏è –í–µ—Å": cmd_update_weight,
    "üìè –†–æ—Å—Ç": cmd_update_height,
    "üéÇ –í–æ–∑—Ä–∞—Å—Ç": cmd_update_age,
    "‚ôÇÔ∏è‚ôÄÔ∏è –ü–æ–ª": cmd_update_gender,
    "üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": cmd_update_activity_level,
    "‚úèÔ∏è –ò–º—è": cmd_update_name,
    "üéØ –¶–µ–ª—å": cmd_update_goal,
    "üõ†Ô∏è –ö–∫–∞–ª": update_calories,
    "üõ†Ô∏è –ë–µ–ª–∫–∏": update_belki,
    "üõ†Ô∏è –ñ–∏—Ä—ã": update_jiri,
    "üõ†Ô∏è –£–≥–ª–µ–≤–æ–¥—ã": update_uglewodi,
    "üçΩÔ∏è –ö–∫–∞–ª": add_calories,
    "ü•© –ë–µ–ª–∫–∏": add_belki,
    "ü•ë –ñ–∏—Ä—ã": add_jiri,
    "üçû –£–≥–ª–µ–≤–æ–¥—ã": add_uglewodi,
    "üìÖ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å": cmd_select_date,
    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å": start_edit_day
}



@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def handle_cal1(message: types.Message):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {message.text}")
    await cmd_change_in_cal(message, new=True)
    
@dp.message(F.text == "üõ†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def handle_cal2(message: types.Message):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {message.text}")
    await cmd_change_in_cal(message)

@dp.message(F.text.in_(BUTTON_HANDLERS))
async def handle_buttons(message: types.Message):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {message.text}")
    handler = BUTTON_HANDLERS[message.text]
    await handler(message)

@dp.message(F.text.in_(BUTTON_HANDLERS_WITH_STATE))
async def handle_buttons_with_state(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {message.text}")
    handler = BUTTON_HANDLERS_WITH_STATE[message.text]
    await handler(message, state)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", StateFilter(SurveyStates.GET_EDIT_PARAM))
async def cancel_edit(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=calender_keyboard())

@dp.message(F.text)
async def handle_unknown_message(message: types.Message):
    logger.warning(f"–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer(
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
        reply_markup=menu_keyboard()
    )  

if __name__ == "__main__":
    logger.info("Starting bot...")
    dp.run_polling(bot)